<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License"); you
 may not use this file except in compliance with the License. You
 may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 implied. See the License for the specific language governing
 permissions and limitations under the License. See accompanying
 LICENSE file.
-->
<project name="pulse" default="usage" basedir=".">

  <target depends="usage" name="help"/>

  <target name="usage">
    <description>Prints information about what can be built</description>

    <echo>
Commonly used targets:
  build-product        Builds product into product dist
  pack-RNotes          Creates ReleaseNotes from RNDeltaNotes.txt
  compile-tests        Builds tests
  run-tests            Run tests
  precheckin           Does an update-git, clean, build-all, run-tests
  usage (or help)      Prints this help information

Available targets:
  build-all            Cleans, Compiles source and tests, and creates pulse warfile
  clean                Cleans all byproducts of building

Command Line Defines:
  -DSOMESWITCH=dir     NOT IMPLEMENTED
    </echo>
  </target>

  <!-- Property reference to environment variables -->
  <property environment="myenv"/>

  <!-- Define IF Task from ant-contrib -->
  <condition property="antcontrib.taskfile" value="net/sf/antcontrib/antlib.xml">
    <antversion atleast="1.8"/>
  </condition>

  <!-- If antcontrib.taskfile is not set -->
  <property name="antcontrib.taskfile" value="net/sf/antcontrib/antcontrib.properties"/>

  <taskdef resource="${antcontrib.taskfile}"/>

  <!-- determine machine and os, and if this is a 32 bit only or 64 bit only platform -->
  <import file="buildfiles/osplatform.xml"/>

  <!-- import any properties defined in a properties file -->
  <available file="${basedir}/build${gf.os}.properties" property="build.os.exists"/>
  <if><isset property="build.os.exists"/><then>
    <echo message="Loading properties from ${basedir}/build${gf.os}.properties:" level="info"/>
    <property file="${basedir}/build${gf.os}.properties"/>
    <concat>
      <filelist dir="${basedir}" files="build${gf.os}.properties"/>
    </concat>
  </then></if>

  <available file="${basedir}/build.properties" property="build.props.exists"/>
  <if><isset property="build.os.exists"/><then>
    <echo message="Loading properties from ${basedir}/build.properties:" level="info"/>
    <property file="${basedir}/build.properties"/>
    <concat>
      <filelist dir="${basedir}" files="build.properties"/>
    </concat>
  </then></if>

  <property name="build.dir" value="${basedir}/build-artifacts"/>
  <property name="osbuild.dir" value="${build.dir}/${gf.os}"/>
  <property name="app.name"      value="pulse"/>
  <property name="app.path"      value="/${app.name}"/>
  <property name="pulse.version"   value="1.5.0"/>
  <property name="target.dir"    value="${osbuild.dir}/target"/>
  <property name="dist.dir"     value="${osbuild.dir}/dist"/>
  <property name="src.dir"      value="${basedir}/src/main/java"/>
  <property name="classes.dir"    value="${target.dir}/WEB-INF/classes"/>
  <property name="tests.dir"    value="${basedir}/src/test/java"/>
  <property name="tests.resources.dir"    value="${basedir}/src/test/resources"/>
  <property name="tests.classes.dir"    value="${target.dir}/tests/classes"/>
  <property name="tests.results.dir"    value="${target.dir}/tests/results"/>
  <property name="web.dir"      value="${basedir}/src/main/webapp"/>
  <property name="application.lib.home"      value="${web.dir}/WEB-INF/lib"/>
  <property name="application.extlib.home"      value="${basedir}/lib_managed"/>
  <property name="properties.dir"    value="${target.dir}/properties"/>

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>
  <property name="compile-gemfire.deprecation" value="off"/>

  <path id="src.compile.classpath">
    <!-- Application Libraries -->
    <fileset dir="${application.extlib.home}">
      <include name="*.jar"/>
      <exclude name="junit*.jar"/>
      <exclude name="*hamcrest*.jar"/>
    </fileset>
  </path>

  <path id="test.compile.classpath">
    <fileset dir="${application.extlib.home}">
      <include name="*.jar"/>
    </fileset>
    <!--
    <pathelement location="${application.extlib.home}/json-20151123.jar"/>
    <pathelement location="${application.extlib.home}/com.springsource.org.apache.commons.collections-3.2.1.jar"/>
    <pathelement location="${application.extlib.home}/tomcat-embed-core-7.0.50.jar"/>
    <pathelement location="${application.extlib.home}/tomcat-embed-jasper-7.0.50.jar"/>
    <pathelement location="${application.extlib.home}/tomcat-embed-logging-juli-7.0.50.jar"/>
    <pathelement location="${application.extlib.home}/junit-4.11.jar"/>
    <pathelement location="${application.extlib.home}/hamcrest-core-1.3.jar"/>
    -->
    <fileset dir="${application.extlib.home}/selenium">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- TARGETS -->

  <target name="precheckin" depends="update-git, clean, build-all, run-tests"/>

  <target name="build-all" depends="clean, build-product, compile-tests" description="Clean build and dist directories, then compile"/>

  <target name="build-product-RNotes" depends="build-product, pack-RNotes" description="Compile and create dist with Release Notes"/>

  <target name="build-product" depends="dist" description="Compile and create dist"/>

  <target name="all" depends="build-all" description="Compile and create dist"/>

  <target name="setbat" unless="bat">
    <!--windows config -->
    <condition property="bat" value=".bat">
       <os family="windows"/>
    </condition>
    <!-- non-windows defaults -->
    <property name="bat" value=""/>
  </target>

  <!-- copy all dependencies to extlib using gradle -->
  <target name="copyDependencies" depends="setbat">
    <exec executable="${basedir}/gradlew${bat}" dir="${basedir}" failonerror="true">
      <arg value="copyDependencies"/>
    </exec>
  </target>

  <target name="props">

  <!-- these two lines get hostname without requiring cygwin on windows -->
    <exec executable="hostname"
          failifexecutionfails="false"
          outputproperty="myenv.COMPUTERNAME"/>
    <property name="host.name" value="${myenv.COMPUTERNAME}"/>

    <echo message="osbuild.dir is ${osbuild.dir}" level="info"/>
    <echo message="Running on ${host.name}" level="info"/>

    <property name="compile-gemfire.deprecation" value="off"/>

    <!-- Do not allow build artifacts to be place on the filer -->
    <fail message="Build artifacts cannot reside on the filer (${osbuild.dir}).  Please use a build properties file">
      <condition>
        <contains string="${osbuild.dir}" substring="shared_build"
                  casesensitive="false"/>
      </condition>
    </fail>

    <mkdir dir="${osbuild.dir}"/>
    <property name="src.dir" value="${basedir}/src"/>

    <property name="last.update.file" value="lastUpdate.txt"/>
    <property name="date.pattern" value="MM/dd/yyyy HH:mm:ss z"/>

    <tstamp>
       <format pattern="yyyy-MM-dd-hh-mm-ss-SSS" property="sys.build.time"/>
       <format pattern="${date.pattern}" property="build.time"/>
    </tstamp>

    <antcall target="make-last-update"/>
    <!-- If svn was manually run then update lastUpdate.txt and build.number -->
    <uptodate property="makelastupdate.Required"
      srcfile="${build.dir}/${last.update.file}"
      targetfile="${basedir}/.svn/entries"/>

    <if><isset property="makelastupdate.Required"/><then>
      <antcall target="make-last-update"/>
      <property name="skipLastUpdate"  value="true"/>
    </then></if>

  </target>

  <target name="clean" depends="props" description="Delete old build and dist directories">
    <delete dir="${osbuild.dir}"/>
    <delete dir="${application.extlib.home}"/>
  </target>

  <target name="prepare" depends="props">
    <!-- Create staging directories as needed -->
    <mkdir  dir="${target.dir}"/>
    <mkdir  dir="${target.dir}/WEB-INF"/>
    <mkdir  dir="${target.dir}/licenses"/>
    <mkdir  dir="${classes.dir}"/>

    <!-- Copy static content, jsps and web.xml  of this web application -->
    <copy todir="${target.dir}">
      <fileset dir="${web.dir}"/>
    </copy>

    <!-- Copy external dependencies as required -->
    <mkdir  dir="${target.dir}/WEB-INF/lib"/>

  </target>

  <target name="compile" depends="prepare" description="Compile Java sources">
    <!-- Compile Java classes as necessary -->
    <echo level="info" message="Compiling Pulse source..."/>
    <javac srcdir="${src.dir}"
          destdir="${classes.dir}"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}" includeantruntime="false">
        <classpath refid="src.compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy  todir="${classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="dist" depends="copyDependencies,compile" description="Create binary distribution">

    <!-- Copy dependent libs -->
    <copy file="${application.extlib.home}/spring-security-core-3.1.7.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-security-web-3.1.7.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-security-config-3.1.7.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-security-ldap-3.1.7.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-ldap-core-1.3.2.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>

    <copy file="${application.extlib.home}/spring-core-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-web-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-beans-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-context-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-aspects-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-expression-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-aop-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-webmvc-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/spring-tx-3.2.16.RELEASE.jar" todir="${target.dir}/WEB-INF/lib"/>

    <copy file="${application.extlib.home}/com.springsource.org.apache.commons.beanutils-1.8.3.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/com.springsource.org.apache.commons.collections-3.2.1.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/com.springsource.org.apache.commons.digester-1.8.1.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/com.springsource.org.apache.commons.logging-1.1.1.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/commons-lang-2.6.jar" todir="${target.dir}/WEB-INF/lib"/>
    <copy file="${application.extlib.home}/json-20151123.jar" todir="${target.dir}/WEB-INF/lib"/>

    <copy file="src/main/resources/pulse-users.properties" todir="${target.dir}/WEB-INF/classes"/>

   <!-- Copy All license files -->
   <copy file="LICENSE" tofile="${target.dir}/LICENSE"/>
   <copy todir="${target.dir}/licenses">
     <fileset dir="licenses">
       <include name="**/*.txt"/>
     </fileset>
   </copy>

   <!-- Copy All Locale files -->
   <copy todir="${classes.dir}">
    <fileset dir="src/main/resources">
      <include name="**/LogMessages*.properties"/>
    </fileset>
   </copy>

    <!-- Product and internationalization files -->
    <copy todir="${properties.dir}">
      <fileset dir="src/main/resources">
        <include name="**/default.properties"/>
        <include name="**/gemfire.properties"/>
        <include name="**/gemfirexd.properties"/>
      </fileset>
    </copy>

    <!-- Create pulse.properties file for including in WAR -->
    <property file="${build.dir}/${last.update.file}"/>
    <property file="${build.dir}/build.number"/>
    <propertyfile comment="Pulse Properties File" file="${classes.dir}/pulseversion.properties">
      <entry key="pulse.version" value="${pulse.version}"/>
      <entry key="Build-Id" value="${user.name} ${build.number}"/>
      <entry key="Build-Date" value="${build.time}"/>
      <entry key="Source-Date" value="${source.date}"/>
      <entry key="Source-Revision" value="${source.revision}"/>
      <entry key="Source-Repository" value="${source.branch}"/>
    </propertyfile>

    <!-- Create application JAR/WAR file -->
    <jar jarfile="${dist.dir}/${app.name}-${pulse.version}.war"
         basedir="${target.dir}"/>

  </target>

  <target name="update-git" depends="props">
    <description>Updates the sources to latest revision.</description>

    <property name="git.logfile" value="update-git.log"/>
    <property name="git.hist.logfile" value=".git-history.log"/>
    <property name="git.branch" value=".git/.git-branch.log"/>
    <delete file="${git.logfile}" quiet="true"/>

    <!-- Need finally block for git pull because it may actually
         perform a lot of updates before failing, and we want to capture
         those in .git-history.log -->
    <trycatch>
      <try>
        <exec executable="git" resultproperty="gitpullExitStatus" output="${git.logfile}">
          <arg value="pull"/>
        </exec>
      </try>
      <finally>
        <exec executable="git" append="true" output="${git.logfile}">
          <arg value="status"/>
        </exec>
      </finally>
    </trycatch>

    <condition property="gitpullFailed">
      <equals arg1="${gitpullExitStatus}" arg2="1"/>
    </condition>
    <if>
      <isset property="gitpullFailed"/>
      <then>
        <exec executable="cat" >
          <arg value="${git.logfile}"/>
        </exec>
        <fail if="gitpullFailed" message="git pull failed. See ${git.logfile} for details."/>
      </then>
    </if>

    <delete file="${build.dir}/${last.update.file}" quiet="true"/>
    <antcall inheritAll="true" target="make-last-update"/>

    <concat append="true" fixlastline="true" destfile="${git.hist.logfile}" >
==============================
</concat>  <!-- Leave the two lines above as is so they concat properly -->

    <concat append="true" fixlastline="true" destfile="${git.hist.logfile}">
      <filelist dir="${basedir}" files="build-artifacts/build.number"/>
      <filelist dir="${basedir}" files="${git.logfile}"/>
    </concat>
  </target>

  <target name="rcs-init">
    <available file=".git" type="dir" property="git.present"/>
    <available file=".svn" type="dir" property="svn.present"/>
  </target>

  <target name="make-last-update" depends="rcs-init" unless="skipLastUpdate">
    <description>Creates a file that contains the time at which the
         GemFire checkout was last updated</description>

    <mkdir dir="${build.dir}"/>

    <!-- Make Last Update File with SVN workspace -->
    <if>
      <isset property="svn.present"/>
      <then>
        <delete file="${build.dir}/${last.update.file}" quiet="true"/>
        <echo level="info" message="Querying SVN Workspace Information" />
        <svnSetting client="cli" dateformatter="MM/dd/yyyy HH:mm:ss z" id="svn.settings"/>
          <!-- Get svn info of the SVN workspace -->
          <svn refid="svn.settings">
            <info target="."/>
          </svn>
          <propertyregex property="source.branch"
            input="${svn.info.url}"
            regexp="^https\:\/\/svn\.gemstone\.com\/repos\/"
            replace=""
            casesensitive="false" />
        </then>
        <elseif>
          <isset property="git.present"/>
          <then>
            <property name="git.status" value="${basedir}/.git/.git-status.log"/>
            <echo level="info" message="Querying GIT Workspace Information..." />

            <exec executable="git" failonerror="false" output="${git.status}">
              <arg value="log"/>
              <arg value="--grep=git-svn-id"/>
              <arg value="-1"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="GIT.source.branch">
              <arg value="rev-parse"/>
              <arg value="--abbrev-ref"/>
              <arg value="HEAD"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="GIT.source.revision">
              <arg value="rev-parse"/>
              <arg value="HEAD"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="GIT.source.date">
              <arg value="show"/>
              <arg value="-s"/>
              <arg value="--format=%cD"/>
              <arg value="${GIT.source.revision}"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="TEMPGIT.build.number">
              <arg value="rev-list"/>
              <arg value="origin/${GIT.source.branch}"/>
              <arg value="--count"/>
            </exec>

          </then>
        </elseif>
        <else>
          <echo level="info" message="No revision control information found"/>
        </else>
    </if>

    <!-- If git version is old then dash-dash-count switch doesn't work so use date string instead -->
    <if>
      <contains string="${TEMPGIT.build.number}" substring="usage" />
      <then>
        <tstamp>
          <format property="GIT.build.number" pattern="MMddyy"/>
        </tstamp>
        <echo message="Falling back to date string for build.number due to older git version." level="info"/>
      </then>
      <else>
        <property name="GIT.build.number" value="${TEMPGIT.build.number}"/>
      </else>
    </if>

    <!-- Load lastUpdate.txt properties with prefix to avoid setting -->
    <property file="${build.dir}/${last.update.file}" prefix="PROP" prefixValues="true"/>

    <if>
      <equals arg1="${GIT.source.revision}" arg2="${PROP.source.revision}" />
      <then>
        <echo message="Source revision hasn't changed. Skipping property file update..." />
      </then>
    <else>
      <!-- Create LastUpdate Property File -->
      <echo message="Updating build-artifacts property files..." level="info"/>

      <property name="git.status" value="${basedir}/.git/.git-status.log"/>
      <delete file="${git.status}" quiet="true"/>
      <delete file="${build.dir}/${last.update.file}" quiet="true"/>

      <propertyfile comment="Information about a checkout" file="${build.dir}/${last.update.file}">
        <entry key="source.branch" value="${GIT.source.branch}"/>
        <entry key="source.date" value="${GIT.source.date}"/>
        <entry key="source.revision" value="${GIT.source.revision}"/>
      </propertyfile>

      <delete file="${build.dir}/build.number" quiet="true"/>
      <propertyfile comment="Build Number File" file="${build.dir}/build.number">
        <entry key="build.number" value="${GIT.build.number}"/>
      </propertyfile>
    </else>
   </if>

   <!-- Load lastUpdate.txt to set properties and print banner -->
   <property file="${build.dir}/${last.update.file}"/>
   <property file="${build.dir}/build.number"/>
   <echo message="" level="info"/>
   <echo message="=========================================" level="info"/>
   <echo message="Version: ${pulse.version} ${user.name} ${build.number}" level="info"/>
   <echo message="Source-branch: ${source.branch}" level="info"/>
   <echo message="Source-Date: ${source.date}" level="info"/>
   <echo message="Source-Revision: ${source.revision}" level="info"/>
   <echo message="=========================================" level="info"/>

  </target>

  <target name="update-svn" depends="props">
    <description>Updates the current checkout revision.</description>

    <property name="svn.logfile" value="update-svn.log"/>
    <property name="svn.hist.logfile" value=".svn-history.log"/>
    <delete file="${svn.logfile}" quiet="true"/>

    <!-- Need finally block for svn update because it may actually
         perform a lot of updates before failing, and we want to capture
         those in .svn-history.log -->
    <trycatch>
      <try>
        <exec executable="svn" failonerror="true" output="${svn.logfile}">
          <arg value="update"/>
          <arg value="--accept"/>
          <arg value="postpone"/>
        </exec>
      </try>
      <finally>
        <exec executable="svn" append="true" output="${svn.logfile}">
          <arg value="status"/>
        </exec>
      </finally>
    </trycatch>

    <antcall target="make-last-update"/>

    <concat append="true" fixlastline="true" destfile="${svn.hist.logfile}" >
==============================
</concat>  <!-- Leave the two lines above as is so they concat properly -->

    <concat append="true" fixlastline="true" destfile="${svn.hist.logfile}">
      <filelist dir="${basedir}" files="build-artifacts/build.number"/>
      <filelist dir="${basedir}" files="${svn.logfile}"/>
    </concat>

    <echo message="Checking for update conflicts in ${svn.logfile}" level="info"/>

    <exec executable="grep" resultproperty="grepExitStatus">
      <arg value="^C "/>
      <arg value="${svn.logfile}"/>
    </exec>
    <condition property="grepFailed">
      <equals arg1="${grepExitStatus}" arg2="0"/>
    </condition>

    <fail if="grepFailed" message="SVN update conflicts detected."/>
  </target>

  <target name="pack-RNotes" depends="props">
    <delete file="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt" quiet="true"/>
    <property file="${build.dir}/build.number"/>
    <property file="${build.dir}/lastUpdate.txt"/>

    <copy file="${basedir}/ReleaseNotes.txt"
            tofile="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt"/>

    <concat append="true" fixlastline="true" destfile="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt" >
--------------------------------
 Changes in ${pulse.version} ${user.name} ${build.number}
 Source-Revision=${source.revision}
 Build-Date=${build.time}
--------------------------------
</concat>

    <concat append="true" fixlastline="true" destfile="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt">
      <filelist dir="${basedir}" files="RNDeltaChanges.txt"/>
    </concat>

    <!-- Place updates of files with intention they can be checked in -->
    <replace file="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt">
      <replacetoken><![CDATA[#]]></replacetoken>
      <replacevalue><![CDATA[]]></replacevalue>
    </replace>

    <replace file="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt">
      <replacetoken><![CDATA[
 Please keep text to 78 char width - no wider than this 

]]></replacetoken>
      <replacevalue><![CDATA[]]></replacevalue>
    </replace>

    <copy file="${dist.dir}/Pulse_${pulse.version}_ReleaseNotes.txt"
       tofile="${basedir}/ReleaseNotes.txt.UPDATE"/>

    <copy file="${basedir}/RNDeltaChanges.txt"
       tofile="${basedir}/RNDeltaChanges.txt.UPDATE"/>
  </target>

  <target name="compile-tests" depends="compile">

    <mkdir dir="${tests.classes.dir}"/>
    <echo level="info" message="Compiling Pulse tests..."/>
    <javac srcdir="${tests.dir}"
           destdir="${tests.classes.dir}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           includeantruntime="false"
           fork="yes"
           verbose="no">
        <classpath>
          <path refid="test.compile.classpath"/>
          <pathelement location="${target.dir}/WEB-INF/classes"/>
        </classpath>
    </javac>

  </target>

  <target name="run-tests" depends="compile-tests">

    <!-- TODO: Automate deployment of Pulse to standalone tomcat server -->

    <!-- Set default properties for pulse.url-->
    <property name="http-host" value="localhost"/>
    <property name="http-port" value="8080"/>
    <property name="pulsewarfile" value="${dist.dir}/${app.name}-${pulse.version}.war"/>

    <mkdir dir="${tests.results.dir}"/>
    <echo level="info" message="Running Tests..."/>

    <!-- Currently there are only GUI (web browser) tests which require access to Pulse running -->
    <junit printsummary="yes"
           failureProperty="tests.failed"
           haltOnFailure="false">
      <assertions>
        <enable/>
      </assertions>
      <sysproperty key="pulse.propMockDataUpdaterFile" value="${tests.resources.dir}/testbed.properties"/>
      <sysproperty key="pulse.propMockDataUpdaterClass" value="com.pivotal.gemfire.tools.pulse.testbed.PropMockDataUpdater"/>
      <sysproperty key="pulse.url" value="http://${http-host}:${http-port}/pulse"/>
      <sysproperty key="pulse.war" value="${pulsewarfile}"/>

      <classpath>
        <path refid="test.compile.classpath"/>
        <pathelement location="${tests.classes.dir}"/>
        <pathelement location="${tests.resources.dir}"/>
        <pathelement location="${classes.dir}"/>
      </classpath>

      <formatter type="plain"/>

      <batchtest fork="yes" todir="${tests.results.dir}">
        <fileset dir="${tests.dir}">
          <include name="**/*Tests.java"/>
          <include name="**/*Test.java"/>
          <exclude name="**/AllTests.java"/>
          <exclude name="**/Base*.java"/>
        </fileset>
      </batchtest>
    </junit>

    <if><isset property="tests.failed"/><then>
      <echo message="FAILED: Test failures in ${tests.results.dir}" level="error"/>
      <echo append="true" file="${tests.results.dir}/TestFailures" message="FAILED: Test failures in ${tests.results.dir}" level="error"/>
      <fail message="FAILED: One or more tests failed"/>
    </then></if>

  </target>
</project>
